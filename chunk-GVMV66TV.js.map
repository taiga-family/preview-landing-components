{"version":3,"sources":["node_modules/@tiptap/extension-text-style/dist/index.js"],"sourcesContent":["import { Mark, mergeAttributes } from '@tiptap/core';\nconst mergeNestedSpanStyles = element => {\n  if (!element.children.length) {\n    return;\n  }\n  const childSpans = element.querySelectorAll('span');\n  if (!childSpans) {\n    return;\n  }\n  childSpans.forEach(childSpan => {\n    var _a, _b;\n    const childStyle = childSpan.getAttribute('style');\n    const closestParentSpanStyleOfChild = (_b = (_a = childSpan.parentElement) === null || _a === void 0 ? void 0 : _a.closest('span')) === null || _b === void 0 ? void 0 : _b.getAttribute('style');\n    childSpan.setAttribute('style', `${closestParentSpanStyleOfChild};${childStyle}`);\n  });\n};\n/**\n * This extension allows you to create text styles. It is required by default\n * for the `textColor` and `backgroundColor` extensions.\n * @see https://www.tiptap.dev/api/marks/text-style\n */\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  priority: 101,\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      mergeNestedSpanStyles: false\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        if (this.options.mergeNestedSpanStyles) {\n          mergeNestedSpanStyles(element);\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({\n        tr\n      }) => {\n        const {\n          selection\n        } = tr;\n        // Gather all of the nodes within the selection range.\n        // We would need to go through each node individually\n        // to check if it has any inline style attributes.\n        // Otherwise, calling commands.unsetMark(this.name)\n        // removes everything from all the nodes\n        // within the selection range.\n        tr.doc.nodesBetween(selection.from, selection.to, (node, pos) => {\n          // Check if it's a paragraph element, if so, skip this node as we apply\n          // the text style to inline text nodes only (span).\n          if (node.isTextblock) {\n            return true;\n          }\n          // Check if the node has no inline style attributes.\n          // Filter out non-`textStyle` marks.\n          if (!node.marks.filter(mark => mark.type === this.type).some(mark => Object.values(mark.attrs).some(value => !!value))) {\n            // Proceed with the removal of the `textStyle` mark for this node only\n            tr.removeMark(pos, pos + node.nodeSize, this.type);\n          }\n        });\n        return true;\n      }\n    };\n  }\n});\nexport { TextStyle, TextStyle as default };\n"],"mappings":"+CACA,IAAMA,EAAwBC,GAAW,CACvC,GAAI,CAACA,EAAQ,SAAS,OACpB,OAEF,IAAMC,EAAaD,EAAQ,iBAAiB,MAAM,EAC7CC,GAGLA,EAAW,QAAQC,GAAa,CAC9B,IAAIC,EAAIC,EACR,IAAMC,EAAaH,EAAU,aAAa,OAAO,EAC3CI,GAAiCF,GAAMD,EAAKD,EAAU,iBAAmB,MAAQC,IAAO,OAAS,OAASA,EAAG,QAAQ,MAAM,KAAO,MAAQC,IAAO,OAAS,OAASA,EAAG,aAAa,OAAO,EAChMF,EAAU,aAAa,QAAS,GAAGI,CAA6B,IAAID,CAAU,EAAE,CAClF,CAAC,CACH,EAMME,EAAYC,EAAK,OAAO,CAC5B,KAAM,YACN,SAAU,IACV,YAAa,CACX,MAAO,CACL,eAAgB,CAAC,EACjB,sBAAuB,EACzB,CACF,EACA,WAAY,CACV,MAAO,CAAC,CACN,IAAK,OACL,SAAUR,GACUA,EAAQ,aAAa,OAAO,GAI1C,KAAK,QAAQ,uBACfD,EAAsBC,CAAO,EAExB,CAAC,GALC,EAOb,CAAC,CACH,EACA,WAAW,CACT,eAAAS,CACF,EAAG,CACD,MAAO,CAAC,OAAQC,EAAgB,KAAK,QAAQ,eAAgBD,CAAc,EAAG,CAAC,CACjF,EACA,aAAc,CACZ,MAAO,CACL,qBAAsB,IAAM,CAAC,CAC3B,GAAAE,CACF,IAAM,CACJ,GAAM,CACJ,UAAAC,CACF,EAAID,EAOJ,OAAAA,EAAG,IAAI,aAAaC,EAAU,KAAMA,EAAU,GAAI,CAACC,EAAMC,IAAQ,CAG/D,GAAID,EAAK,YACP,MAAO,GAIJA,EAAK,MAAM,OAAOE,GAAQA,EAAK,OAAS,KAAK,IAAI,EAAE,KAAKA,GAAQ,OAAO,OAAOA,EAAK,KAAK,EAAE,KAAKC,GAAS,CAAC,CAACA,CAAK,CAAC,GAEnHL,EAAG,WAAWG,EAAKA,EAAMD,EAAK,SAAU,KAAK,IAAI,CAErD,CAAC,EACM,EACT,CACF,CACF,CACF,CAAC","names":["mergeNestedSpanStyles","element","childSpans","childSpan","_a","_b","childStyle","closestParentSpanStyleOfChild","TextStyle","Mark","HTMLAttributes","mergeAttributes","tr","selection","node","pos","mark","value"],"x_google_ignoreList":[0]}